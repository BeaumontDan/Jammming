{"ast":null,"code":"var _jsxFileName = \"/Users/danbeaumont/Documents/Code_Projects/jammming/src/components/App/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport styles from './App.module.css';\n\n// import components\nimport Header from '../Header/Header';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [searchResults, setSearchResults] = useState([{\n    name: 'Summer in the City',\n    artist: 'The Lovin Spoonful',\n    album: 'Hums Of The Lovin Spoonful',\n    id: 1\n  }, {\n    name: 'All That She Wants',\n    artist: 'Ace of Bace',\n    album: 'The Sign',\n    id: 2\n  }]);\n  {/*\n   const [playlistName, setPlaylistName] = useState('My Playlist');\n   const [playlistTracks, setPlaylistTracks] = useState([]);\n   const search = useCallback((phrase) => {\n    Spotify.search(phrase).then(setSearchResults);\n   }, []);\n   const addTrack = useCallback((track) => {\n    if (playlistTracks.some((savedTrack) => savedTrack.id === track.id))\n      return;\n     setPlaylistTracks((prevTracks) => [...prevTracks, track]);\n   }, [playlistTracks]\n   );\n   const removeTrack = useCallback((track) => {\n   setPlaylistTracks((prevTracks) =>\n    prevTracks.filter((currentTrack) => currentTrack.id !== track.id)\n   );\n   }, []);\n   const updatePlaylistName = useCallback((name) => {\n   setPlaylistName(name);\n   }, []);\n   const savePlaylist = useCallback(() => {\n   const trackUris = playlistTracks.map((track) => track.uri);\n   Spotify.savePlaylist(playlistName, trackUris).then(() => {\n    setPlaylistName(\"My Playlist\");\n    setPlaylistTracks([]);\n   });\n   }, [playlistName, playlistTracks]);\n   */}\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.App,\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Playlist,\n        children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n          userSearchResults: searchResults,\n          onAdd: addTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n          playlistName: playlistName,\n          playlistTracks: playlistTracks,\n          onNameChange: updatePlaylistName,\n          onRemove: removeTrack,\n          onSave: savePlaylist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"7/CwCT565yyUnyqnPED45nbS4/Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","styles","Header","Playlist","SearchBar","SearchResults","Spotify","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","searchResults","setSearchResults","name","artist","album","id","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","search","userSearchResults","onAdd","addTrack","playlistName","playlistTracks","onNameChange","updatePlaylistName","onRemove","removeTrack","onSave","savePlaylist","_c","$RefreshReg$"],"sources":["/Users/danbeaumont/Documents/Code_Projects/jammming/src/components/App/App.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport styles from './App.module.css';\n\n// import components\nimport Header from '../Header/Header'\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nconst App = () => {\n\n  const [searchResults, setSearchResults] = useState([\n      {\n          name: 'Summer in the City',\n          artist: 'The Lovin Spoonful',\n          album: 'Hums Of The Lovin Spoonful',\n          id: 1\n      },\n      {\n          name: 'All That She Wants',\n          artist: 'Ace of Bace',\n          album: 'The Sign',\n          id: 2\n      }\n  ]);\n\n  {/*\n  const [playlistName, setPlaylistName] = useState('My Playlist');\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n\n  const search = useCallback((phrase) => {\n    Spotify.search(phrase).then(setSearchResults);\n  }, []);\n\n  const addTrack = useCallback((track) => {\n    if (playlistTracks.some((savedTrack) => savedTrack.id === track.id))\n      return;\n\n    setPlaylistTracks((prevTracks) => [...prevTracks, track]);\n  }, [playlistTracks]\n);\n\nconst removeTrack = useCallback((track) => {\n  setPlaylistTracks((prevTracks) =>\n    prevTracks.filter((currentTrack) => currentTrack.id !== track.id)\n  );\n}, []);\n\nconst updatePlaylistName = useCallback((name) => {\n  setPlaylistName(name);\n}, []);\n\nconst savePlaylist = useCallback(() => {\n  const trackUris = playlistTracks.map((track) => track.uri);\n  Spotify.savePlaylist(playlistName, trackUris).then(() => {\n    setPlaylistName(\"My Playlist\");\n    setPlaylistTracks([]);\n  });\n}, [playlistName, playlistTracks]);\n*/}\n\n  return (\n    <>\n    <div className={styles.App}>\n\n      <Header />\n\n      <SearchBar onSearch={search} />\n\n      <div className={styles.Playlist}>\n        <SearchResults userSearchResults={searchResults} onAdd={addTrack} />\n\n        <Playlist\n          playlistName={playlistName}\n          playlistTracks={playlistTracks}\n          onNameChange={updatePlaylistName}\n          onRemove={removeTrack}\n          onSave={savePlaylist}\n        />\n\n      </div>\n\n    </div>\n\n    </>\n  );\n\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAOC,MAAM,MAAM,kBAAkB;;AAErC;AACA,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,OAAO,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEhB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,CAC/C;IACIgB,IAAI,EAAE,oBAAoB;IAC1BC,MAAM,EAAE,oBAAoB;IAC5BC,KAAK,EAAE,4BAA4B;IACnCC,EAAE,EAAE;EACR,CAAC,EACD;IACIH,IAAI,EAAE,oBAAoB;IAC1BC,MAAM,EAAE,aAAa;IACrBC,KAAK,EAAE,UAAU;IACjBC,EAAE,EAAE;EACR,CAAC,CACJ,CAAC;EAEF,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA3BG;EAmCD,oBACEV,OAAA,CAAAE,SAAA;IAAAS,QAAA,eACAX,OAAA;MAAKY,SAAS,EAAEnB,MAAM,CAACU,GAAI;MAAAQ,QAAA,gBAEzBX,OAAA,CAACN,MAAM;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEVhB,OAAA,CAACJ,SAAS;QAACqB,QAAQ,EAAEC;MAAO;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE/BhB,OAAA;QAAKY,SAAS,EAAEnB,MAAM,CAACE,QAAS;QAAAgB,QAAA,gBAC9BX,OAAA,CAACH,aAAa;UAACsB,iBAAiB,EAAEd,aAAc;UAACe,KAAK,EAAEC;QAAS;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAEpEhB,OAAA,CAACL,QAAQ;UACP2B,YAAY,EAAEA,YAAa;UAC3BC,cAAc,EAAEA,cAAe;UAC/BC,YAAY,EAAEC,kBAAmB;UACjCC,QAAQ,EAAEC,WAAY;UACtBC,MAAM,EAAEC;QAAa;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEH;EAAC,gBAEJ,CAAC;AAGP,CAAC;AAACZ,EAAA,CA9EID,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAgFT,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}