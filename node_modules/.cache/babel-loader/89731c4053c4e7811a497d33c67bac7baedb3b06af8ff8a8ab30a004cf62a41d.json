{"ast":null,"code":"import React,{useState}from'react';import styles from'./App.module.css';// import components\nimport Header from'../Header/Header';import Playlist from'../Playlist/Playlist';import SearchBar from'../SearchBar/SearchBar';import SearchResults from'../SearchResults/SearchResults';import Spotify from'../../util/Spotify';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const App=()=>{const[searchResults,setSearchResults]=useState([/*{\n      name: 'Summer in the City',\n      artist: 'The Lovin Spoonful',\n      album: 'Hums Of The Lovin Spoonful',\n      id: 1\n    },\n    {\n      name: 'All That She Wants',\n      artist: 'Ace of Bace',\n      album: 'The Sign',\n      id: 2\n    },\n    {\n      name: 'Its Like That',\n      artist: 'Run DMC',\n      album: 'The Greatest Hits',\n      id: 3\n    }*/]);const[playlistName,setPlaylistName]=useState('My Playlist');const[playlistTracks,setPlaylistTracks]=useState([/*{\n      name: 'Dreaming of You',\n      artist: 'The Coral',\n      album: 'The Invisible Invasion',\n      id: 4\n    },\n    {\n      name: 'Can I Kick It',\n      artist: 'A Tribe Called Quest',\n      album: 'Peoples Instinctive Travels and the Paths of Rhythm',\n      id: 5\n    }*/]);const addTrack=track=>{const existingTrack=playlistTracks.find(t=>t.id===track.id);const newTrack=playlistTracks.concat(track);if(existingTrack){console.log(\"Track already exists\");}else{setPlaylistTracks(newTrack);}};const removeTrack=track=>{const existingTrack=playlistTracks.filter(t=>t.id!==track.id);setPlaylistTracks(existingTrack);};const updatePlaylistName=name=>{setPlaylistName(name);};const savePlaylist=()=>{const trackURIs=playlistTracks.map(t=>t.uri);Spotify.savePlaylist(playlistName,trackURIs).then(()=>{setPlaylistName(\"New Playlist\");setPlaylistTracks([]);});};const search=term=>{Spotify.search(term).then(result=>setSearchResults(result));console.log(term);};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:styles.App,children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(SearchBar,{onSearch:search}),/*#__PURE__*/_jsxs(\"div\",{className:styles.Playlist,children:[/*#__PURE__*/_jsx(SearchResults,{userSearchResults:searchResults,onAdd:addTrack}),/*#__PURE__*/_jsx(Playlist,{playlistName:playlistName,playlistTracks:playlistTracks,onRemove:removeTrack,onNameChange:updatePlaylistName,onSave:savePlaylist})]})]})});};export default App;","map":{"version":3,"names":["React","useState","styles","Header","Playlist","SearchBar","SearchResults","Spotify","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","searchResults","setSearchResults","playlistName","setPlaylistName","playlistTracks","setPlaylistTracks","addTrack","track","existingTrack","find","t","id","newTrack","concat","console","log","removeTrack","filter","updatePlaylistName","name","savePlaylist","trackURIs","map","uri","then","search","term","result","children","className","onSearch","userSearchResults","onAdd","onRemove","onNameChange","onSave"],"sources":["/Users/danbeaumont/Documents/Code_Projects/jammming/src/components/App/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from './App.module.css';\n\n// import components\nimport Header from '../Header/Header'\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nconst App = () => {\n\n  const [searchResults, setSearchResults] = useState([\n    /*{\n      name: 'Summer in the City',\n      artist: 'The Lovin Spoonful',\n      album: 'Hums Of The Lovin Spoonful',\n      id: 1\n    },\n    {\n      name: 'All That She Wants',\n      artist: 'Ace of Bace',\n      album: 'The Sign',\n      id: 2\n    },\n    {\n      name: 'Its Like That',\n      artist: 'Run DMC',\n      album: 'The Greatest Hits',\n      id: 3\n    }*/\n  ]);\n\n  const [playlistName, setPlaylistName] = useState('My Playlist');\n\n  const [playlistTracks, setPlaylistTracks] = useState([\n    /*{\n      name: 'Dreaming of You',\n      artist: 'The Coral',\n      album: 'The Invisible Invasion',\n      id: 4\n    },\n    {\n      name: 'Can I Kick It',\n      artist: 'A Tribe Called Quest',\n      album: 'Peoples Instinctive Travels and the Paths of Rhythm',\n      id: 5\n    }*/\n  ]);\n\n  const addTrack = (track) => {\n    const existingTrack = playlistTracks.find((t) => t.id === track.id);\n    const newTrack = playlistTracks.concat(track);\n    if (existingTrack) {\n      console.log(\"Track already exists\");\n    } else {\n      setPlaylistTracks(newTrack);\n    }\n  }\n\n  const removeTrack = (track) => {\n    const existingTrack = playlistTracks.filter((t) => t.id !== track.id);\n    setPlaylistTracks(existingTrack);\n  }\n\n\n  const updatePlaylistName = (name) => {\n    setPlaylistName(name);\n  }\n\n  const savePlaylist = () => {\n    const trackURIs = playlistTracks.map((t) => t.uri);\n    Spotify.savePlaylist(playlistName, trackURIs).then(() => {\n      setPlaylistName(\"New Playlist\");\n      setPlaylistTracks([]);\n    });\n  }\n\n  const search = (term) => {\n    Spotify.search(term).then((result) => setSearchResults(result));\n    console.log(term);\n  }\n\n  return (\n    <>\n      <div className={styles.App}>\n\n        <Header />\n\n        <SearchBar onSearch={search} />\n\n        <div className={styles.Playlist}>\n          <SearchResults userSearchResults={searchResults} onAdd={addTrack} />\n\n          <Playlist\n            playlistName={playlistName}\n            playlistTracks={playlistTracks}\n            onRemove={removeTrack}\n            onNameChange={updatePlaylistName}\n            onSave={savePlaylist}\n          />\n\n        </div>\n\n      </div>\n\n    </>\n  );\n\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}