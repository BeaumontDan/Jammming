{"ast":null,"code":"const BASE_URL = 'https://accounts.spotify.com/authorize';\nconst RESPONSE_TYPE = '?response_type=token';\nconst CLIENT_ID = `&client_id=${process.env.REACT_APP_SPOTIFY}`;\nconst REDIRECT_URL = `&redirect_uri=${process.env.NODE_ENV === 'development' ? 'http://localhost:3000/' : 'https://qapush-jammming.netlify.app/'}`;\nconst SCOPE = '&scope=playlist-modify-private user-read-private';\nlet TOKEN = null;\nconst getToken = () => {\n  if (TOKEN) {\n    return TOKEN;\n  } else if (window.location.hash.length > 1) {\n    const hashParameters = {};\n    // window.location.hash.split('&').forEach(i => hashParameters[i] = i);\n    window.location.hash.slice(1) // to remove # sign\n    .split('&') // to split to paramater/value groups))\n    .forEach(item => {\n      const parameter = item.split('=');\n      hashParameters[parameter[0]] = parameter[1];\n    });\n    TOKEN = hashParameters.access_token;\n    window.history.pushState('Access Token', '', '/');\n    return TOKEN;\n  } else if (!TOKEN) {\n    const URL = BASE_URL + RESPONSE_TYPE + CLIENT_ID + SCOPE + REDIRECT_URL;\n    window.location = URL;\n  }\n};\nconst getSongs = async query => {\n  const token = getToken();\n  if (!token) return [];\n  const urlEncodedQuery = encodeURIComponent(query);\n  const url = 'https://api.spotify.com/v1/search?q=' + urlEncodedQuery + '&type=track';\n  const response = await fetch(url, {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  });\n  const data = await response.json();\n  sessionStorage.removeItem(\"searchTerm\");\n  return !data.tracks ? [] : data.tracks.items.map(({\n    name,\n    id,\n    album,\n    artists,\n    uri\n  }) => ({\n    name,\n    id,\n    uri,\n    artist: artists[0].name,\n    album: album.name,\n    image: album.images[2].url\n  }));\n};\nconst createPlaylist = async listObject => {\n  const token = getToken();\n  const urlEncodedListName = encodeURIComponent(listObject.name);\n  const headers = {\n    'Authorization': 'Bearer ' + token\n  };\n  const userResponse = await fetch('https://api.spotify.com/v1/me', {\n    headers\n  });\n  const {\n    id: userId\n  } = await userResponse.json();\n  const createPlaylistResponse = await fetch('https://api.spotify.com/v1/users/' + userId + '/playlists', {\n    headers,\n    method: 'POST',\n    body: JSON.stringify({\n      name: urlEncodedListName,\n      public: false\n    })\n  });\n  const {\n    id\n  } = await createPlaylistResponse.json();\n  fetch('https://api.spotify.com/v1/playlists/' + id + '/tracks', {\n    headers,\n    method: 'POST',\n    body: JSON.stringify({\n      uris: listObject.tracks\n    })\n  });\n};\nexport { getSongs, createPlaylist };","map":{"version":3,"names":["BASE_URL","RESPONSE_TYPE","CLIENT_ID","process","env","REACT_APP_SPOTIFY","REDIRECT_URL","NODE_ENV","SCOPE","TOKEN","getToken","window","location","hash","length","hashParameters","slice","split","forEach","item","parameter","access_token","history","pushState","URL","getSongs","query","token","urlEncodedQuery","encodeURIComponent","url","response","fetch","headers","data","json","sessionStorage","removeItem","tracks","items","map","name","id","album","artists","uri","artist","image","images","createPlaylist","listObject","urlEncodedListName","userResponse","userId","createPlaylistResponse","method","body","JSON","stringify","public","uris"],"sources":["/Users/danbeaumont/Documents/Code_Projects/jammming/src/util/Spotify.js"],"sourcesContent":["const BASE_URL = 'https://accounts.spotify.com/authorize';\nconst RESPONSE_TYPE = '?response_type=token';\nconst CLIENT_ID = `&client_id=${process.env.REACT_APP_SPOTIFY}`;\nconst REDIRECT_URL = `&redirect_uri=${process.env.NODE_ENV === 'development'\n    ? 'http://localhost:3000/'\n    : 'https://qapush-jammming.netlify.app/'}`;\nconst SCOPE = '&scope=playlist-modify-private user-read-private';\nlet TOKEN = null;\n\nconst getToken = () => {\n   \n    if (TOKEN) {\n        return TOKEN;\n    } else if (window.location.hash.length > 1) {\n\n        const hashParameters = {}\n        // window.location.hash.split('&').forEach(i => hashParameters[i] = i);\n        window.location.hash\n            .slice(1) // to remove # sign\n            .split('&') // to split to paramater/value groups))\n            .forEach(item => {\n                const parameter = item.split('=')\n                hashParameters[parameter[0]] = parameter[1];\n            });\n\n        TOKEN = hashParameters.access_token;\n        window.history.pushState('Access Token', '', '/');\n        return TOKEN;\n        \n    } else if (!TOKEN) {\n        const URL = BASE_URL + RESPONSE_TYPE + CLIENT_ID + SCOPE + REDIRECT_URL;\n        window.location = URL;\n    }\n    \n    \n}\n\nconst getSongs = async (query) => {\n    \n    \n    const token = getToken();\n    if (!token) return [];\n\n    const urlEncodedQuery = encodeURIComponent(query);\n    const url = 'https://api.spotify.com/v1/search?q=' + urlEncodedQuery + '&type=track';\n\n    const response = await fetch(url, {\n        headers: {'Authorization': 'Bearer ' + token }\n    });\n    const data = await response.json();\n    sessionStorage.removeItem(\"searchTerm\");\n    return  !data.tracks ? [] : data.tracks.items.map( ({name, id, album, artists, uri}) => ({\n        name, \n        id,\n        uri,\n        artist: artists[0].name,\n        album: album.name,\n        image: album.images[2].url\n    }));\n}\n\nconst createPlaylist = async (listObject) => {\n\n    const token = getToken();\n    const urlEncodedListName = encodeURIComponent(listObject.name);\n    const headers = {'Authorization': 'Bearer ' + token};\n\n    const userResponse = await fetch('https://api.spotify.com/v1/me', {headers});\n    \n    const {id: userId} = await userResponse.json();\n\n    const createPlaylistResponse = await fetch('https://api.spotify.com/v1/users/' + userId + '/playlists', {\n        headers,\n        method: 'POST',\n        body: JSON.stringify({name: urlEncodedListName, public: false})\n    });\n    \n    const { id } = await createPlaylistResponse.json();\n\n    fetch('https://api.spotify.com/v1/playlists/' + id + '/tracks', {\n        headers,\n        method: 'POST',\n        body: JSON.stringify({uris: listObject.tracks })\n    });\n\n}\n\nexport { getSongs, createPlaylist }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}